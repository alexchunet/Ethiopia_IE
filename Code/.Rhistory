library(parallel)
library(pbmcapply)
library(rgeos)
library(rgdal)
library(sp)
library(rmapshaper)
library(raster)
library(geosphere)
library(lubridate)
#### File paths #### ===========================================================
if(Sys.info()[["user"]] == "robmarty") PROJECT_PATH <- "~/Documents/World Bank/Sveta Milusheva - COVID 19 Results"
if(Sys.info()[["user"]] == "wb519128") PROJECT_PATH <- "C:/Users/wb519128/WBG/Sveta Milusheva - COVID 19 Results"
if(Sys.info()[["user"]] == "WB521633") PROJECT_PATH <- "C:/Users/wb521633/WBG/Sveta Milusheva - COVID 19 Results"
if(Sys.info()[["user"]] == "robmarty") GITHUB_PATH <- "~/Documents/Github/covid-mobile-data"
if(Sys.info()[["user"]] == "wb519128") GITHUB_PATH <- "C:/Users/wb519128/Github/covid-mobile-data"
if(Sys.info()[["user"]] == "WB521633") GITHUB_PATH <- "C:/Users/wb521633/Documents/Github/covid-mobile-data"
RAW_DATA_ADM2_PATH   <- file.path(PROJECT_PATH, "proof-of-concept", "databricks-results", "zw", "admin2", "flowminder")
RAW_DATA_ADM3_PATH   <- file.path(PROJECT_PATH, "proof-of-concept", "databricks-results", "zw", "admin3", "flowminder")
CUSTOM_DATA_ADM2_PATH   <- file.path(PROJECT_PATH, "proof-of-concept", "databricks-results", "zw", "admin2", "custom")
CUSTOM_DATA_ADM3_PATH   <- file.path(PROJECT_PATH, "proof-of-concept", "databricks-results", "zw", "admin3", "custom")
CLEAN_DATA_ADM2_PATH <- file.path(PROJECT_PATH, "proof-of-concept", "databricks-results", "zw", "admin2", "data_clean")
CLEAN_DATA_ADM3_PATH <- file.path(PROJECT_PATH, "proof-of-concept", "databricks-results", "zw", "admin3", "data_clean")
GEO_ADM2_PATH        <- file.path(PROJECT_PATH, "proof-of-concept", "databricks-results", "zw", "admin2", "geo_files")
GEO_ADM3_PATH        <- file.path(PROJECT_PATH, "proof-of-concept", "databricks-results", "zw", "admin3", "geo_files")
DASHBOARD_DATA_PATH  <- file.path(GITHUB_PATH, "dashboard-dataviz", "zimbabwe_dashboard", "data_inputs_for_dashboard")
# Run this in order to go create variables to run code within the function.
data = read.csv(file.path(RAW_DATA_ADM3_PATH, "count_unique_subscribers_per_region_per_day.csv"), stringsAsFactors=F)
values_var = "subscriber_count"
dates_var = "visit_date"
region_var = "region"
type = "non-od"
timeunit = "day"
agg_od_day_to_wk = F
admin_sp = readRDS(file.path(CLEAN_DATA_ADM3_PATH, "ward_aggregated_clean.Rds"))
#### Clean Data
#### DESCRIPTION: Prepares into format needed for dashboard. Deals with outliers,
# etc.Datasets are saved as .Rds files in the clean_data folder. For consistenty,
# the name of the original dataset is preserved.
#### BASIC STRUCTURE
# Organization is a product of things somewhat being cobbled together & the
# use of this script expanding -- for example, adding district by just looping
# over things because I'm lazy and didn't want to rework much.
# 1. Main cleaning code
# 2. Load and clean spatial datasets (need standardzied variable names for
#    rest of code)
# 3. Loop through unit type (district, ward)
#    ---Load dataset
#    ---Run cleaning code
#    ---In some cases do a bit of final cleaning
#    ---Export
# Set if data should be exported
EXPORT = T
# *** FUNCTIONS ================================================================
# HTML labels function ---------------------------------------------------------
# This creates slightly diffrent labels for each type of data. It does
# assume that all column names are standardized so it might be a bit
# unstable. Not great functional programming :/
make_change_label <- function(data,
timeunit,
OD){
# Different labels if OD or density indicators
if(OD){
label_head <-
paste0(
data$name_origin,
" to ",
data$name_dest)
} else{
label_head <- data$name
}
# What goes into all labels
label_middle <-
paste0("This ", timeunit, "'s value: ",data$value_count, ".")
label_middle <- ifelse(data$value_count %in% 0 | is.na(data$value_count),
"15 of fewer<br>or information not available",
label_middle)
# If first day/week of the series remove info
# on previous time unit
label_tail <- paste0("The baseline February value was: ",
data$value_count_baseline, ".<br>",
"Compared to baseline, this ", timeunit, "<br>",
"had a ",
data$value_perchange_feb %>% round(2) %>% abs(),
"% ",
data$inc_dec_base,
" (a ",
data$value_zscore_feb %>% round(2),
" z-score)."
)
label_tail <- ifelse(data$date == min(data$date),
"",
label_tail)
label_tail <- ifelse(data$value_count %in% 0 | is.na(data$value_count),
"",
label_tail)
# Construct final label
html_label <-
paste(label_head,
label_middle,
label_tail,
sep = "<br>") %>%
str_replace_all("<br><br>", "<br>")%>%
str_replace_all("<br>$", "")
}
make_count_label <- function(data,
timeunit,
OD = F){
# Different labels if OD or density indicators
if(OD){
label_head <-
paste0(
data$name_origin,
" to ",
data$name_dest)
} else{
label_head <- data$name
}
# What goes into all labels
label_middle <-
paste0("This ", timeunit, "'s value: ",data$value_count, ".")
label_middle <- ifelse(data$value_count %in% 0 | is.na(data$value_count),
"15 of fewer<br>or information not available",
label_middle)
# If first day/week of the series remove info
# on previous time unit
label_tail <- paste0("Last ", timeunit, "'s value: ",
data$value_lag, ".",
"<br>",
"This ", timeunit, " had a ",
data$value_count_chng %>% abs(),
" ",
"(",
data$value_perchng %>% round(2) %>% abs(),
"%",
") ",
data$inc_dec,
"<br>compared to the previous ",
timeunit, ".")
label_tail <- ifelse(data$date == min(data$date),
"",
label_tail)
label_tail <- ifelse(data$value_count %in% 0 | is.na(data$value_count),
"",
label_tail)
# Construct final label
html_label <-
paste(label_head,
label_middle,
label_tail,
sep = "<br>")
return(html_label)
}
# Clean Date Variable ----------------------------------------------------------
clean_week_variable <- function(data, varname, type){
# DESCRIPTION: Function to clean week variable into text format (e.g.,
# Feb 01 - Feb 07).
# INPUTS:
# data: dataset
# varname: variable name (string) of week variable
# type: either "integer" or "date."
# If integer converts, for example, 6 -- > Feb 01 - Feb 07
# If date (date of start of week), converts yyyy-mm-dd to text
# Make a temp variable name so can access variable using $ instead of
# [[""]] as easier to read.
data$week_var <- data[[varname]]
# Inputs could be numeric, factor or date -- so for consistency convert to
# character as the output will be character.
data$week_var <- data$week_var %>% as.character()
if(type == "integer"){
data$week_var[data$week_var %in% "6"] <- "Feb 01 - Feb 07"
data$week_var[data$week_var %in% "7"] <- "Feb 08 - Feb 14"
data$week_var[data$week_var %in% "8"] <- "Feb 15 - Feb 21"
data$week_var[data$week_var %in% "9"] <- "Feb 22 - Feb 28"
data$week_var[data$week_var %in% "10"] <- "Feb 29 - Mar 06"
data$week_var[data$week_var %in% "11"] <- "Mar 07 - Mar 13"
data$week_var[data$week_var %in% "12"] <- "Mar 14 - Mar 20"
data$week_var[data$week_var %in% "13"] <- "Mar 21 - Mar 27"
data$week_var[data$week_var %in% "14"] <- "Mar 28 - Apr 03"
} else if (type == "date"){
data$week_var_orig <- data$week_var
data$week_var <- "Feb 01 - Feb 07"
data$week_var[data$week_var_orig >= "2020-02-08"] <- "Feb 08 - Feb 14"
data$week_var[data$week_var_orig >= "2020-02-15"] <- "Feb 15 - Feb 21"
data$week_var[data$week_var_orig >= "2020-02-22"] <- "Feb 22 - Feb 28"
data$week_var[data$week_var_orig >= "2020-02-29"] <- "Feb 29 - Mar 06"
data$week_var[data$week_var_orig >= "2020-03-07"] <- "Mar 07 - Mar 13"
data$week_var[data$week_var_orig >= "2020-03-14"] <- "Mar 14 - Mar 20"
data$week_var[data$week_var_orig >= "2020-03-21"] <- "Mar 21 - Mar 27"
data$week_var[data$week_var_orig >= "2020-03-28"] <- "Mar 28 - Apr 03"
data$week_var_orig <- NULL
}
# Change variable name back to original
data[[varname]] <- data$week_var
data$week_var <-  NULL
return(data)
}
# Make Brazil Regex Search -----------------------------------------------------
brazil_tweets <- readRDS(file.path(dropbox_file_path, "Data", "twitter", "FinalData", "brazil_tweets", "rds", "brazil_tweets_appended.Rds"))
# COVID Webscraping and Social Media Analysis
# Packages ---------------------------------------------------------------------
library(gtrendsR)
library(dplyr)
library(parallel)
library(pbmcapply)
library(ggplot2)
library(jsonlite)
library(stringr)
library(raster)
library(stringi)
library(lubridate)
library(purrr)
library(tidytext)
library(quanteda)
library(qdap)
library(SentimentAnalysis)
library(sentimentr)
library(tm)
library(tokenizers)
library(wordcloud)
library(ggwordcloud)
library(ggpubr)
# Filepaths --------------------------------------------------------------------
if(Sys.info()[["user"]] == "WB521633") dropbox_file_path <- "C:/Users/wb521633/Dropbox/World Bank/Side Work/COVID Social Media Analysis"
if(Sys.info()[["user"]] == "robmarty") dropbox_file_path <- "~/Dropbox/World Bank/Side Work/COVID Social Media Analysis"
if(Sys.info()[["user"]] == "WB521633") covid_twitter_github <- "C:/Users/wb521633/Documents/Github/COVID-19-TweetIDs"
if(Sys.info()[["user"]] == "robmarty") covid_twitter_github <- "~/Documents/Github/COVID-19-TweetIDs"
brazil_twitter_figures_path <- file.path(dropbox_file_path, "Data", "twitter", "Outputs", "figures")
# Restrict Tweets to Those in Brazil
# Make Brazil Regex Search -----------------------------------------------------
brazil_tweets <- readRDS(file.path(dropbox_file_path, "Data", "twitter", "FinalData", "brazil_tweets", "rds", "brazil_tweets_appended.Rds"))
head(brazil_tweets)
#### Add generic variables
data$values_var <- data[[values_var]]
data$dates_var  <- data[[dates_var]]
data$region_var <- data[[region_var]] %>% as.character()
#### If "non-od" level, fill data with all regions
# In some non-od level datasets, some regions have no observations and are
# not included in the dataset. Here we fill the dataset with all regions.
# For od level datasets, this would create too large of datasets that would
# really slow down shiny; we deal with missing regions in shiny for od datasets.
if(type %in% "non-od"){
regions_not_in_data <- admin_sp$region[!(admin_sp$region %in% data$region_var)]
regions_to_add <- lapply(regions_not_in_data, function(region_i){
data_i <- data[1,]
data_i$region_var <- region_i
data_i$values_var <- 0
return(data_i)
}) %>% bind_rows()
data <- bind_rows(data, regions_to_add)
}
#### Format Date Variable
# Convert "day" variable to day format and "week" variable to ordered factor
# variable with appropriate labels.
if(timeunit %in% "day"){
data <- data %>%
mutate(dates_var = dates_var %>%
as.character() %>%
substring(1,10) %>%
as.Date())
}
data$dates_var
data <- data %>%
clean_week_variable("dates_var", "integer")
data$dates_var
head(data)
data <- data %>%
clean_week_variable("dates_var", "integer")
head(data)
varname <- "dates_var"
# Make a temp variable name so can access variable using $ instead of
# [[""]] as easier to read.
data$week_var <- data[[varname]]
head(data)
# Inputs could be numeric, factor or date -- so for consistency convert to
# character as the output will be character.
data$week_var <- data$week_var %>% as.character()
# Clean Date Variable ----------------------------------------------------------
clean_week_variable <- function(data, varname, type){
# DESCRIPTION: Function to clean week variable into text format (e.g.,
# Feb 01 - Feb 07).
# INPUTS:
# data: dataset
# varname: variable name (string) of week variable
# type: either "integer" or "date."
# If integer converts, for example, 6 -- > Feb 01 - Feb 07
# If date (date of start of week), converts yyyy-mm-dd to text
# Make a temp variable name so can access variable using $ instead of
# [[""]] as easier to read. Add _TEMP to reduce change name doesn't conflict
# with existing variable name. Not most stable but oh well.
data$week_var_TEMP <- data[[varname]]
# Inputs could be numeric, factor or date -- so for consistency convert to
# character as the output will be character.
data$week_var_TEMP <- data$week_var_TEMP %>% as.character()
if(type == "integer"){
data$week_var_TEMP[data$week_var_TEMP %in% "6"] <- "Feb 01 - Feb 07"
data$week_var_TEMP[data$week_var_TEMP %in% "7"] <- "Feb 08 - Feb 14"
data$week_var_TEMP[data$week_var_TEMP %in% "8"] <- "Feb 15 - Feb 21"
data$week_var_TEMP[data$week_var_TEMP %in% "9"] <- "Feb 22 - Feb 28"
data$week_var_TEMP[data$week_var_TEMP %in% "10"] <- "Feb 29 - Mar 06"
data$week_var_TEMP[data$week_var_TEMP %in% "11"] <- "Mar 07 - Mar 13"
data$week_var_TEMP[data$week_var_TEMP %in% "12"] <- "Mar 14 - Mar 20"
data$week_var_TEMP[data$week_var_TEMP %in% "13"] <- "Mar 21 - Mar 27"
data$week_var_TEMP[data$week_var_TEMP %in% "14"] <- "Mar 28 - Apr 03"
} else if (type == "date"){
data$week_var_orig_TEMP <- data$week_var_TEMP
data$week_var_TEMP <- "Feb 01 - Feb 07"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-02-08"] <- "Feb 08 - Feb 14"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-02-15"] <- "Feb 15 - Feb 21"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-02-22"] <- "Feb 22 - Feb 28"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-02-29"] <- "Feb 29 - Mar 06"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-03-07"] <- "Mar 07 - Mar 13"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-03-14"] <- "Mar 14 - Mar 20"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-03-21"] <- "Mar 21 - Mar 27"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-03-28"] <- "Mar 28 - Apr 03"
data$week_var_orig <- NULL
}
# Change variable name back to original
data[[varname]] <- data$week_var_TEMP
data$week_var_TEMP <-  NULL
return(data)
}
#### Clean Data
#### DESCRIPTION: Prepares into format needed for dashboard. Deals with outliers,
# etc.Datasets are saved as .Rds files in the clean_data folder. For consistenty,
# the name of the original dataset is preserved.
#### BASIC STRUCTURE
# Organization is a product of things somewhat being cobbled together & the
# use of this script expanding -- for example, adding district by just looping
# over things because I'm lazy and didn't want to rework much.
# 1. Main cleaning code
# 2. Load and clean spatial datasets (need standardzied variable names for
#    rest of code)
# 3. Loop through unit type (district, ward)
#    ---Load dataset
#    ---Run cleaning code
#    ---In some cases do a bit of final cleaning
#    ---Export
# Set if data should be exported
EXPORT = T
# *** FUNCTIONS ================================================================
# HTML labels function ---------------------------------------------------------
# This creates slightly diffrent labels for each type of data. It does
# assume that all column names are standardized so it might be a bit
# unstable. Not great functional programming :/
make_change_label <- function(data,
timeunit,
OD){
# Different labels if OD or density indicators
if(OD){
label_head <-
paste0(
data$name_origin,
" to ",
data$name_dest)
} else{
label_head <- data$name
}
# What goes into all labels
label_middle <-
paste0("This ", timeunit, "'s value: ",data$value_count, ".")
label_middle <- ifelse(data$value_count %in% 0 | is.na(data$value_count),
"15 of fewer<br>or information not available",
label_middle)
# If first day/week of the series remove info
# on previous time unit
label_tail <- paste0("The baseline February value was: ",
data$value_count_baseline, ".<br>",
"Compared to baseline, this ", timeunit, "<br>",
"had a ",
data$value_perchange_feb %>% round(2) %>% abs(),
"% ",
data$inc_dec_base,
" (a ",
data$value_zscore_feb %>% round(2),
" z-score)."
)
label_tail <- ifelse(data$date == min(data$date),
"",
label_tail)
label_tail <- ifelse(data$value_count %in% 0 | is.na(data$value_count),
"",
label_tail)
# Construct final label
html_label <-
paste(label_head,
label_middle,
label_tail,
sep = "<br>") %>%
str_replace_all("<br><br>", "<br>")%>%
str_replace_all("<br>$", "")
}
make_count_label <- function(data,
timeunit,
OD = F){
# Different labels if OD or density indicators
if(OD){
label_head <-
paste0(
data$name_origin,
" to ",
data$name_dest)
} else{
label_head <- data$name
}
# What goes into all labels
label_middle <-
paste0("This ", timeunit, "'s value: ",data$value_count, ".")
label_middle <- ifelse(data$value_count %in% 0 | is.na(data$value_count),
"15 of fewer<br>or information not available",
label_middle)
# If first day/week of the series remove info
# on previous time unit
label_tail <- paste0("Last ", timeunit, "'s value: ",
data$value_lag, ".",
"<br>",
"This ", timeunit, " had a ",
data$value_count_chng %>% abs(),
" ",
"(",
data$value_perchng %>% round(2) %>% abs(),
"%",
") ",
data$inc_dec,
"<br>compared to the previous ",
timeunit, ".")
label_tail <- ifelse(data$date == min(data$date),
"",
label_tail)
label_tail <- ifelse(data$value_count %in% 0 | is.na(data$value_count),
"",
label_tail)
# Construct final label
html_label <-
paste(label_head,
label_middle,
label_tail,
sep = "<br>")
return(html_label)
}
# Clean Date Variable ----------------------------------------------------------
clean_week_variable <- function(data, varname, type){
# DESCRIPTION: Function to clean week variable into text format (e.g.,
# Feb 01 - Feb 07).
# INPUTS:
# data: dataset
# varname: variable name (string) of week variable
# type: either "integer" or "date."
# If integer converts, for example, 6 -- > Feb 01 - Feb 07
# If date (date of start of week), converts yyyy-mm-dd to text
# Make a temp variable name so can access variable using $ instead of
# [[""]] as easier to read. Add _TEMP to reduce change name doesn't conflict
# with existing variable name. Not most stable but oh well.
data$week_var_TEMP <- data[[varname]]
# Inputs could be numeric, factor or date -- so for consistency convert to
# character as the output will be character.
data$week_var_TEMP <- data$week_var_TEMP %>% as.character()
if(type == "integer"){
data$week_var_TEMP[data$week_var_TEMP %in% "6"] <- "Feb 01 - Feb 07"
data$week_var_TEMP[data$week_var_TEMP %in% "7"] <- "Feb 08 - Feb 14"
data$week_var_TEMP[data$week_var_TEMP %in% "8"] <- "Feb 15 - Feb 21"
data$week_var_TEMP[data$week_var_TEMP %in% "9"] <- "Feb 22 - Feb 28"
data$week_var_TEMP[data$week_var_TEMP %in% "10"] <- "Feb 29 - Mar 06"
data$week_var_TEMP[data$week_var_TEMP %in% "11"] <- "Mar 07 - Mar 13"
data$week_var_TEMP[data$week_var_TEMP %in% "12"] <- "Mar 14 - Mar 20"
data$week_var_TEMP[data$week_var_TEMP %in% "13"] <- "Mar 21 - Mar 27"
data$week_var_TEMP[data$week_var_TEMP %in% "14"] <- "Mar 28 - Apr 03"
} else if (type == "date"){
data$week_var_orig_TEMP <- data$week_var_TEMP
data$week_var_TEMP <- "Feb 01 - Feb 07"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-02-08"] <- "Feb 08 - Feb 14"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-02-15"] <- "Feb 15 - Feb 21"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-02-22"] <- "Feb 22 - Feb 28"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-02-29"] <- "Feb 29 - Mar 06"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-03-07"] <- "Mar 07 - Mar 13"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-03-14"] <- "Mar 14 - Mar 20"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-03-21"] <- "Mar 21 - Mar 27"
data$week_var_TEMP[data$week_var_orig_TEMP >= "2020-03-28"] <- "Mar 28 - Apr 03"
data$week_var_orig <- NULL
}
# Change variable name back to original
data[[varname]] <- data$week_var_TEMP
data$week_var_TEMP <-  NULL
return(data)
}
shiny::runApp('~/Documents/Github/covid-mobile-data/dashboard-dataviz/zimbabwe_dashboard')
runApp('~/Documents/Github/covid-mobile-data/dashboard-dataviz/zimbabwe_dashboard')
runApp('~/Documents/Github/covid-mobile-data/dashboard-dataviz/zimbabwe_dashboard')
values <- c(-10:10, NA, 10:20)
values_pos_index <- values > 0
values_neg_index <- values <= 0
values_pos_log <- log(values[values_pos_index]+1)
values_neg_log <- -log(-(values[values_neg_index])+1)
values[values_pos_index] <- values_pos_log
values[values_neg_index] <- values_neg_log
values <- c(-10:10, NA, 10:20)
values_pos_index <- values > 0
values_neg_index <- values <= 0
values_pos_log <- log(values[values_pos_index]+1)
values_neg_log <- -log(-(values[values_neg_index])+1)
values_pos_index
values
runApp('~/Documents/Github/covid-mobile-data/dashboard-dataviz/zimbabwe_dashboard')
values <- c(-10:10, NA, 10:20)
values <- c(-10:10, NA, 10:20)
values_pos_index <- (values > 0)  %in% T # %in% T to account for NAs
values_neg_index <- (values <= 0) %in% T
values_pos_log <- log(values[values_pos_index]+1)
values_neg_log <- -log(-(values[values_neg_index])+1)
values[values_pos_index] <- values_pos_log
values[values_neg_index] <- values_neg_log
runApp('~/Documents/Github/covid-mobile-data/dashboard-dataviz/zimbabwe_dashboard')
runApp('~/Documents/Github/covid-mobile-data/dashboard-dataviz/zimbabwe_dashboard')
