afro.all$no_const_limits_pres_length.bin[afro.all$no_const_limits_pres_length %in% c(1,2)] <- 0
#q80a
afro.all$best.dev.model[afro.all$best.dev.model %in% c(-1)] <- NA
#afro.all$best.dev.model[afro.all$best.dev.model %in% c(9999)] <- NA # Don't Know/haven't heard enough
afro.all$usa.best.dev.model <- as.numeric((afro.all$best.dev.model == 1))
afro.all$china.best.dev.model <- as.numeric((afro.all$best.dev.model == 2))
afro.all$formcolnpower.best.dev.model <- as.numeric((afro.all$best.dev.model == 3))
#q80b
afro.all$most.influence[afro.all$most.influence %in% c(-1)] <- NA
#afro.all$most.influence[afro.all$most.influence %in% c(9)] <- NA # Don't Know/haven't heard enough
afro.all$usa.most.influence <- as.numeric((afro.all$most.influence == 1))
afro.all$china.most.influence <- as.numeric((afro.all$most.influence == 2))
afro.all$formcolnpower.most.influence <- as.numeric((afro.all$most.influence == 3))
afro.all$IOs.most.influence <- as.numeric((afro.all$most.influence == 6))
#q81a
afro.all$china.influence.econ.activity[afro.all$china.influence.econ.activity %in% c(-1)] <- NA
afro.all$china.influence.econ.activity[afro.all$china.influence.econ.activity %in% c(9,99)] <- NA # Don't Know/haven't heard enough
afro.all$china.influence.econ.activity.bin <- NA
afro.all$china.influence.econ.activity.bin[afro.all$china.influence.econ.activity %in% c(0,1)] <- 0 # None, A little
afro.all$china.influence.econ.activity.bin[afro.all$china.influence.econ.activity %in% c(2,3)] <- 1 # Some, A Lot
#q81b
afro.all$china.econpol.influence.positive[afro.all$china.econpol.influence.positive %in% c(-1)] <- NA
afro.all$china.econpol.influence.positive[afro.all$china.econpol.influence.positive %in% c(9,99)] <- NA # Don't Know/haven't heard enough
afro.all$china.econpol.influence.positive.bin <- NA
afro.all$china.econpol.influence.positive.bin[afro.all$china.econpol.influence.positive %in% c(1,2,3)] <- 0 # Very negative, somewhat negative, neutral
afro.all$china.econpol.influence.positive.bin[afro.all$china.econpol.influence.positive %in% c(4,5)] <- 1 # Somewhat positive, very positive
#q81e
afro.all$china.aid.good.job.meet.country.needs[afro.all$china.aid.good.job.meet.country.needs %in% c(-1)] <- NA
afro.all$china.aid.good.job.meet.country.needs[afro.all$china.aid.good.job.meet.country.needs %in% c(9,98,99)] <- NA # Don't Know/haven't heard enough
afro.all$china.aid.good.job.meet.country.needs.bin <- NA
afro.all$china.aid.good.job.meet.country.needs.bin[afro.all$china.aid.good.job.meet.country.needs %in% c(1,2,3)] <- 0 # Very bad job, somewhat bad job, neither good or bad
afro.all$china.aid.good.job.meet.country.needs.bin[afro.all$china.aid.good.job.meet.country.needs %in% c(4,5)] <- 1 # somewhat good job, very good job
#q98h
afro.all$china.help.country[afro.all$china.help.country %in% c(-1,9)] <- NA
afro.all$china.help.country[afro.all$china.help.country %in% c(0,1)] <- 0  # c(0,1)
afro.all$china.help.country[afro.all$china.help.country %in% c(2,3)] <- 1  # c(2,3)
#q98i
afro.all$usa.help.country[afro.all$usa.help.country %in% c(-1,9)] <- NA
afro.all$usa.help.country[afro.all$usa.help.country %in% c(0,1)] <- 0  # c(0,1)
afro.all$usa.help.country[afro.all$usa.help.country %in% c(2,3)] <- 1  # c(2,3)
# Strongly/Disaprove = 1,2; Strongly/Agree = 3,4; 5,9 = haven't hear enough about him to know
afro.all$apprv.president.pstYear.bin <- NA
afro.all$apprv.president.pstYear.bin[afro.all$apprv.president.pstYear %in% c(3,4)] <- 1
afro.all$apprv.president.pstYear.bin[afro.all$apprv.president.pstYear %in% c(1,2)] <- 0
afro.all$courts.right.decisions.bin <- NA
afro.all$courts.right.decisions.bin[afro.all$courts.right.decisions %in% c(4,5)] <- 1
afro.all$courts.right.decisions.bin[afro.all$courts.right.decisions %in% c(1,2,3)] <- 0
afro.all$police.rights.obey.bin <- NA
afro.all$police.rights.obey.bin[afro.all$police.rights.obey %in% c(4,5)] <- 1
afro.all$police.rights.obey.bin[afro.all$police.rights.obey %in% c(1,2,3)] <- 0
afro.all$satisfied.democracy.bin <- NA
afro.all$satisfied.democracy.bin[afro.all$satisfied.democracy %in% c(4,3)] <- 1
afro.all$satisfied.democracy.bin[afro.all$satisfied.democracy %in% c(2,1,0)] <- 0
afro.all$how.much.democracy.bin <- NA
afro.all$how.much.democracy.bin[afro.all$how.much.democracy %in% c(4,3)] <- 1
afro.all$how.much.democracy.bin[afro.all$how.much.democracy %in% c(2,1)] <- 0
afro.all$democracy.is.preferable.bin <- NA
afro.all$democracy.is.preferable.bin[afro.all$democracy.is.preferable %in% c(3)] <- 1
afro.all$democracy.is.preferable.bin[afro.all$democracy.is.preferable %in% c(2,1)] <- 0
afro.all$trust.courts.of.law.bin <- NA
afro.all$trust.courts.of.law.bin[afro.all$trust.courts.of.law %in% c(2,3)] <- 1
afro.all$trust.courts.of.law.bin[afro.all$trust.courts.of.law %in% c(1,0)] <- 0
afro.all$trust.president.bin <- NA
afro.all$trust.president.bin[afro.all$trust.president %in% c(2,3)] <- 1
afro.all$trust.president.bin[afro.all$trust.president %in% c(1,0)] <- 0
afro.all$trust.parliament.bin <- NA
afro.all$trust.parliament.bin[afro.all$trust.parliament %in% c(2,3)] <- 1
afro.all$trust.parliament.bin[afro.all$trust.parliament %in% c(1,0)] <- 0
afro.all$trust.local.council.bin <- NA
afro.all$trust.local.council.bin[afro.all$trust.local.council %in% c(2,3)] <- 1
afro.all$trust.local.council.bin[afro.all$trust.local.council %in% c(1,0)] <- 0
afro.all$trust.military.bin <- NA
afro.all$trust.military.bin[afro.all$trust.military %in% c(2,3)] <- 1
afro.all$trust.military.bin[afro.all$trust.military %in% c(1,0)] <- 0
afro.all$trust.police.bin <- NA
afro.all$trust.police.bin[afro.all$trust.police %in% c(2,3)] <- 1
afro.all$trust.police.bin[afro.all$trust.police %in% c(1,0)] <- 0
afro.all$easy.avoid.pay.tax.bin <- NA
afro.all$easy.avoid.pay.tax.bin[afro.all$easy.avoid.pay.tax %in% c(1,2)] <- 1
afro.all$easy.avoid.pay.tax.bin[afro.all$easy.avoid.pay.tax %in% c(3,4)] <- 0
afro.all$refuse.tax.fee.govt.bin <- NA
afro.all$refuse.tax.fee.govt.bin[afro.all$refuse.tax.fee.govt %in% c(4,3,2)] <- 1
afro.all$refuse.tax.fee.govt.bin[afro.all$refuse.tax.fee.govt %in% c(1,0)] <- 0
afro.all$tax.authorities.right.bin <- NA
afro.all$tax.authorities.right.bin[afro.all$tax.authorities.right %in% c(4,5)] <- 1
afro.all$tax.authorities.right.bin[afro.all$tax.authorities.right %in% c(1,2,3)] <- 0
afro.all$trust.index <- afro.all$trust.police.bin +
afro.all$trust.local.council.bin +
afro.all$trust.parliament.bin +
afro.all$trust.president.bin +
afro.all$trust.courts.of.law.bin
afro.all$legitimacy.index <- afro.all$trust.courts.of.law.bin +
afro.all$police.rights.obey.bin +
afro.all$tax.authorities.right.bin
# Formt Independent Afrobarometer Variables ------------------------------------
afro.all$Education[afro.all$Education %in% c(-1,98,99)] <- NA
#afro.all$Education[afro.all$Education > 0] <- 1
afro.all$piped.water.access[afro.all$piped.water.access == c(9,-1)] <- NA
afro.all$sewage.system.access[afro.all$sewage.system.access == c(9,-1)] <- NA
afro.all$elec.grid.access[afro.all$elec.grid.access == c(9,-1)] <- NA
afro.all$piped.water.access <- afro.all$piped.water.access %>% as.numeric
afro.all$sewage.system.access <- afro.all$sewage.system.access %>% as.numeric
afro.all$elec.grid.access <- afro.all$elec.grid.access %>% as.numeric
afro.all$own.motorVehicle[afro.all$own.motorVehicle %in% c(-1,9,98)] <- NA
afro.all$own.radio[afro.all$own.radio %in% c(-1,9,98,998)] <- NA
afro.all$own.TV[afro.all$own.TV %in% c(-1,9)] <- NA
afro.all$police.station[afro.all$police.station %in% c(-1,9)] <- NA
afro.all$service.index <- afro.all$piped.water.access + afro.all$sewage.system.access + afro.all$elec.grid.access
afro.all$asset.index <- afro.all$own.motorVehicle + afro.all$own.radio + afro.all$own.TV
# Create Afrobarometer Indices -------------------------------------------------
afro.all$china_positive_influence_index <- afro.all$china.best.dev.model + afro.all$china.econpol.influence.positive.bin + afro.all$china.aid.good.job.meet.country.needs.bin
afro.all$china_influential_index  <- afro.all$china.most.influence + afro.all$china.influence.econ.activity.bin
afro.all$china_positive_OR_influence_index <- afro.all$china_positive_influence_index + afro.all$china_influential_index
afro.all$usa_positive_OR_influence_index <- afro.all$usa.best.dev.model + afro.all$usa.most.influence
# Political Qs
afro.all$many_political_party_best.bin <- (1-afro.all$one_political_party_best.bin)
#afro.all$join_any_org.bin
afro.all$gov_shouldnt_prevent_media.bin <- (1-afro.all$gov_right_prevent_media.bin)
#afro.all$democracy.is.preferable.bin
#afro.all$govt_account_better_effic.bin
afro.all$elections_ideal.bin <- (1-afro.all$elections_not_ideal.bin)
afro.all$reporting_neg_events_good.bin <- (1-afro.all$reporting_neg_events_harms.bin)
afro.all$const_limits_pres_length_good.bin <- (1-afro.all$no_const_limits_pres_length.bin)
#afro.all$many_pol_parties_good.bin
afro.all$liberal_govt_better_index <- afro.all$many_political_party_best.bin + #r3
afro.all$join_any_org.bin + #r3
#afro.all$gov_shouldnt_prevent_media.bin +
afro.all$democracy.is.preferable.bin + #r2
#afro.all$govt_account_better_effic.bin +
afro.all$elections_ideal.bin + #r2
#afro.all$reporting_neg_events_good.bin +
#afro.all$const_limits_pres_length_good.bin +
afro.all$many_pol_parties_good.bin #r2
# Format Aid Variables ---------------------------------------------------------
donor_var_list <- c("china.pl05","china.pl06","china.pl07","china.pl08","china.pl09","china.pl10","china.plNA", "usaid","usaid", "usaid_gatesfnd","worldbank")
donor_var_list <- c("china.pl10","china.plNA", "ukaid","usaid", "usaid_gatesfnd")
buffer_list <- c(30)
# Combine PC1&2 buffers with PC3
for(donor in donor_var_list){
for(buffer in buffer_list){
afro.all[[paste0("completed_near_",donor,".",buffer,"km.PC123")]] <- afro.all[[paste0("completed_near_",donor,".",buffer,"km")]] + afro.all[[paste0("completed_near_",donor,".PC3")]]
afro.all[[paste0("planned_near_",donor,".",buffer,"km.PC123")]] <- afro.all[[paste0("planned_near_",donor,".",buffer,"km")]] + afro.all[[paste0("planned_near_",donor,".PC3")]]
afro.all[[paste0("implementing_near_",donor,".",buffer,"km.PC123")]] <- afro.all[[paste0("implementing_near_",donor,".",buffer,"km")]] + afro.all[[paste0("implementing_near_",donor,".PC3")]]
afro.all[[paste0("noyeardata_near_",donor,".",buffer,"km.PC123")]] <- afro.all[[paste0("noyeardata_near_",donor,".",buffer,"km")]] + afro.all[[paste0("noyeardata_near_",donor,".PC3")]]
}
}
# Any PC3 Aid
for(donor in donor_var_list){
afro.all[[paste0("anyproject_near_",donor,".PC3")]] <-
afro.all[[paste0("completed_near_",donor,".PC3")]] +
afro.all[[paste0("planned_near_",donor,".PC3")]] +
afro.all[[paste0("implementing_near_",donor,".PC3")]] +
afro.all[[paste0("noyeardata_near_",donor,".PC3")]]
}
# Make Binary Aid Variables
aid_vars <- names(afro.all)[grepl("completed|planned|implementing|noyeardata|anyproject",names(afro.all))]
for(var in aid_vars){
afro.all[[paste0(var,".bin")]] <- (afro.all[[var]] > 0) %>% as.numeric
}
# Remove Unneeded Variables ====================================================
#### Violent Event Variables
for(event_type in c("violenceagainstcivilians","riotsprotests")){
afro.all <- afro.all[,!grepl(paste(paste0("acled_",event_type,"_",1999:2015),collapse="|"), names(afro.all))]
}
# Clean and Corrections ========================================================
# Correct ISO Names
afro.all$iso[afro.all$iso %in% c("MOR","MRC")] <- "MAR"
afro.all$iso[afro.all$iso %in% c("MLW","MWI")] <- "MWI"
afro.all$iso[afro.all$iso %in% c("TNZ","TAN")] <- "TZA"
# Clean USA Projects; If we don't have country dataset, make their aid value 0
for(var in names(afro.all)[grepl("usaid", names(afro.all))]){
usaid_countries <- c("BDI","CAM","MWI","MOZ","NIG","SEN","SRL","TZA","UGA")
afro.all[[var]][!(afro.all$iso %in% usaid_countries)] <- 0
}
# Export =======================================================================
write.csv(afro.all, file.path(finaldata_file_path, paste0("afrobarometer_chinainafrica_",aid_type,".csv")),row.names=F)
saveRDS(afro.all, file=file.path(finaldata_file_path, paste0("afrobarometer_chinainafrica_",aid_type,".Rds")))
}
# Extract DMSPOLS-Intercalibrated to Points
# Load Data --------------------------------------------------------------------
points <- readRDS(file.path(outputs_for_grid, TYPE, "points.Rds"))
coordinates(points) <- ~long+lat
crs(points) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Extract DMSPOLS-Intercalibrated to Points
# Load Data --------------------------------------------------------------------
points <- readRDS(file.path(outputs_for_grid, TYPE, "points.Rds"))
coordinates(points) <- ~long+lat
crs(points) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
viirs_2012 <- raster(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016", "F101992.tif"))
# Create Gridded Datasets
# Creates gridded datasets using eitehr dmspols or globcover resolution as the
# unit of analysis.
# Filepaths --------------------------------------------------------------------
if(Sys.info()[["user"]] == "WB521633") project_file_path <- "C:/Users/wb521633/Dropbox/World Bank/IEs/Ethiopia IE"
if(Sys.info()[["user"]] == "robmarty") project_file_path <- "~/Dropbox/World Bank/IEs/Ethiopia IE"
rawdata_file_path <- file.path(project_file_path, "Data", "RawData")
outputs_for_grid <- file.path(project_file_path, "Data", "IntermediateData", "Outputs for Grid")
finaldata_file_path <- file.path(project_file_path, "Data", "FinalData")
# Parameters -------------------------------------------------------------------
CHUNK_SIZE_DIST_ROADS <- 1250
MCCORS_DIST_ROADS <- 1
TYPE <- c("DMSPOLS") # globcover, DMSPOLS
UTM_ETH = '+init=epsg:20138'
# Packages ---------------------------------------------------------------------
library(rgdal)
library(raster)
library(velox)
library(dplyr)
library(rgeos)
library(parallel)
library(pbmcapply)
library(data.table)
library(haven)
library(spex)
source("https://raw.githubusercontent.com/ramarty/fast-functions/master/R/functions_in_chunks.R")
# Extract DMSPOLS-Intercalibrated to Points
# Load Data --------------------------------------------------------------------
points <- readRDS(file.path(outputs_for_grid, TYPE, "points.Rds"))
coordinates(points) <- ~long+lat
crs(points) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
viirs_2012 <- raster(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016", "F101992.tif"))
extent(points)
viirs_2012 <- raster(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016", "F101992.tif")) %>% crop(extent(points))
plot(viirs_2012)
list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"))
help(list.files)
year=1992
list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=year)
list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern="1992")
list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year))
list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
ntl <- raster(raster_filepaths[1])
ntl <- raster(raster_filepaths[1]) %>% crop(extent(points))
year=2010
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
raster_filepaths
year=2006
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
raster_filepaths
ntl_1 <- raster(raster_filepaths[1]) %>% crop(extent(points))
ntl_2 <- raster(raster_filepaths[2]) %>% crop(extent(points))
r_mean <- overlay(ntl_1, ntl_2, fun=mean)
ntl_avg <- ntl
ntl_avg <- ntl
ntl_avg[] <- (ntl_1[] + ntl_2[])/2
plot(ntl_avg)
read_ntl <- function(year){
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
if(length(raster_filepaths) == 1){
ntl <- raster(raster_filepaths[1]) %>% crop(extent(points))
} else if(length(raster_filepaths) == 2){
ntl_1 <- raster(raster_filepaths[1]) %>% crop(extent(points))
ntl_2 <- raster(raster_filepaths[2]) %>% crop(extent(points))
ntl <- ntl_1
ntl[] <- (ntl_1[] + ntl_2[])/2
}
ntl[] <- ntl[]*0.01
return(ntl)
}
a <- read_ntl(1992)
read_ntl <- function(year){
# Load NTL and crop to points extent. When 2 nigthttime light datasets for a year,
# average together
print(year)
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
if(length(raster_filepaths) == 1){
ntl <- raster(raster_filepaths[1]) %>% crop(extent(points))
} else if(length(raster_filepaths) == 2){
ntl_1 <- raster(raster_filepaths[1]) %>% crop(extent(points))
ntl_2 <- raster(raster_filepaths[2]) %>% crop(extent(points))
ntl <- ntl_1
ntl[] <- (ntl_1[] + ntl_2[])/2
}
ntl[] <- ntl[]*0.01
return(ntl)
}
plot(a)
dmspols <- read_ntl(1992)
help(extract)
# Extract DMSPOLS-Intercalibrated to Points
# Load Data --------------------------------------------------------------------
points <- readRDS(file.path(outputs_for_grid, TYPE, "points.Rds"))
coordinates(points) <- ~long+lat
crs(points) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
read_ntl <- function(year){
# Load NTL and crop to points extent. When 2 nigthttime light datasets for a year,
# average together
print(year)
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
if(length(raster_filepaths) == 1){
ntl <- raster(raster_filepaths[1]) %>% crop(extent(points))
} else if(length(raster_filepaths) == 2){
ntl_1 <- raster(raster_filepaths[1]) %>% crop(extent(points))
ntl_2 <- raster(raster_filepaths[2]) %>% crop(extent(points))
ntl <- ntl_1
ntl[] <- (ntl_1[] + ntl_2[])/2
}
ntl[] <- ntl[]*0.01
return(ntl)
}
# Add Data ---------------------------------------------------------------------
extract_raster_to_points <- function(year, points){
print(year)
dmspols <- read_ntl(1992)
points$dmspols_zhang <- raster::extract(dmspols, points)
points$year <- year
return(points@data)
}
points_all <- lapply(1992:2012, extract_viirs_to_points, points) %>% bind_rows
# Export -----------------------------------------------------------------------
saveRDS(points_all, file.path(outputs_for_grid, TYPE, "points_dmspols_zhang2016.Rds"))
# Extract DMSPOLS-Intercalibrated to Points
# Load Data --------------------------------------------------------------------
points <- readRDS(file.path(outputs_for_grid, TYPE, "points.Rds"))
coordinates(points) <- ~long+lat
crs(points) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
read_ntl <- function(year){
# Load NTL and crop to points extent. When 2 nigthttime light datasets for a year,
# average together
print(year)
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
if(length(raster_filepaths) == 1){
ntl <- raster(raster_filepaths[1]) %>% crop(extent(points))
} else if(length(raster_filepaths) == 2){
ntl_1 <- raster(raster_filepaths[1]) %>% crop(extent(points))
ntl_2 <- raster(raster_filepaths[2]) %>% crop(extent(points))
ntl <- ntl_1
ntl[] <- (ntl_1[] + ntl_2[])/2
}
ntl[] <- ntl[]*0.01
return(ntl)
}
# Add Data ---------------------------------------------------------------------
extract_raster_to_points <- function(year, points){
print(year)
dmspols <- read_ntl(1992)
points$dmspols_zhang <- raster::extract(dmspols, points)
points$year <- year
return(points@data)
}
points_all <- lapply(1992:2012, extract_raster_to_points, points) %>% bind_rows
# Extract DMSPOLS-Intercalibrated to Points
# Load Data --------------------------------------------------------------------
points <- readRDS(file.path(outputs_for_grid, TYPE, "points.Rds"))
coordinates(points) <- ~long+lat
crs(points) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
read_ntl <- function(year){
# Load NTL and crop to points extent. When 2 nigthttime light datasets for a year,
# average together
print(year)
raster_filepaths <- list.files(file.path(rawdata_file_path, "Nighttime Lights", "DMSP_OLS_INTERCALIBRATED_ZHANG2016"),
pattern=as.character(year),
full.names = T)
if(length(raster_filepaths) == 1){
ntl <- raster(raster_filepaths[1]) %>% crop(extent(points))
} else if(length(raster_filepaths) == 2){
ntl_1 <- raster(raster_filepaths[1]) %>% crop(extent(points))
ntl_2 <- raster(raster_filepaths[2]) %>% crop(extent(points))
ntl <- ntl_1
ntl[] <- (ntl_1[] + ntl_2[])/2
}
ntl[] <- ntl[]*0.01
return(ntl)
}
# Add Data ---------------------------------------------------------------------
extract_raster_to_points <- function(year, points){
print(year)
dmspols <- read_ntl(year)
points$dmspols_zhang <- raster::extract(dmspols, points)
points$year <- year
return(points@data)
}
points_all <- lapply(1992:2012, extract_raster_to_points, points) %>% bind_rows
# Export -----------------------------------------------------------------------
saveRDS(points_all, file.path(outputs_for_grid, TYPE, "points_dmspols_zhang2016.Rds"))
unique(points_all$cell_id)
help(sample)
length(unique(points_all$cell_id))
sample(x=1:10, size=2)
sample(x=1:10,
prob=0.1)
saveRDS(points_all[points_all$cell_id %in% sample(x=unique(points_all$cell_id),
size=ceiling(length(unique(points_all$cell_id))*0.05),
replace=F),],
file.path(finaldata_file_path, "dmspols_grid_dataset", "dmspols_level_dataset_5percentsample.Rds"))
# Merge Datasets Together
# TODO: Include prepping data in here.
# Memory intensive, so clean up garbage
for(i in 1:10) gc()
# Set seed, for creating a random subsample
set.seed(42)
DATASETS_TIME_INVARIANT <- c("points_gadm.Rds")
DATASETS_TIME_VARYING <- c("points_viirs.Rds","
points_distance_roads_bytype.Rds",
"points_distance_roads_byspeed_2016file.Rds",
"points_globcover.Rds",
"points_dmspols_zhang2016.Rds",
"points_distance_improved_roads_byspeed_2016file.Rds")
# Load and Merge ---------------------------------------------------------------
points <- readRDS(file.path(outputs_for_grid, "DMSPOLS", "points.Rds")) %>% data.table
points_dmspols <- readRDS(file.path(outputs_for_grid, "DMSPOLS", "points_dmspols.Rds")) %>% data.table
points_all <- merge(points_dmspols, points, by="cell_id")
for(dataset in DATASETS_TIME_VARYING){
print(dataset)
points_data <- readRDS(file.path(outputs_for_grid, "DMSPOLS", dataset)) %>% data.table
points_all <- merge(points_all, points_data, by=c("cell_id", "year"), all = T)
rm(points_data)
gc()
}
for(dataset in DATASETS_TIME_INVARIANT){
print(dataset)
points_data <- readRDS(file.path(outputs_for_grid, "DMSPOLS", dataset)) %>% data.table
points_all <- merge(points_all, points_data, by="cell_id")
rm(points_data)
gc()
}
# Add in Market Access ---------------------------------------------------------
append_MA_constantpop <- function(year){
# If odd year, use previous year
if(year %% 2 == 1){
year_data <- year - 1
} else{
year_data <- year
}
print(year)
points_MA <- readRDS(file.path(outputs_for_grid, "DMSPOLS", paste0("MA_",year_data,"_constantpopTrue.Rds"))) %>% dplyr::select(cell_id, MA)  %>% data.table
points_MA$year <- year
return(points_MA)
}
points_data_MA <- lapply(1996:2016, append_MA_constantpop) %>%
bind_rows %>%
dplyr::rename(MA_constantpop = MA)
# Merge Datasets Together
# TODO: Include prepping data in here.
# Memory intensive, so clean up garbage
for(i in 1:10) gc()
# Set seed, for creating a random subsample
set.seed(42)
DATASETS_TIME_INVARIANT <- c("points_gadm.Rds")
DATASETS_TIME_VARYING <- c("points_viirs.Rds",
"points_distance_roads_bytype.Rds",
"points_distance_roads_byspeed_2016file.Rds",
"points_globcover.Rds",
"points_dmspols_zhang2016.Rds",
"points_distance_improved_roads_byspeed_2016file.Rds")
# Load and Merge ---------------------------------------------------------------
points <- readRDS(file.path(outputs_for_grid, "DMSPOLS", "points.Rds")) %>% data.table
points_dmspols <- readRDS(file.path(outputs_for_grid, "DMSPOLS", "points_dmspols.Rds")) %>% data.table
points_all <- merge(points_dmspols, points, by="cell_id")
for(dataset in DATASETS_TIME_VARYING){
print(dataset)
points_data <- readRDS(file.path(outputs_for_grid, "DMSPOLS", dataset)) %>% data.table
points_all <- merge(points_all, points_data, by=c("cell_id", "year"), all = T)
rm(points_data)
gc()
}
for(dataset in DATASETS_TIME_INVARIANT){
print(dataset)
points_data <- readRDS(file.path(outputs_for_grid, "DMSPOLS", dataset)) %>% data.table
points_all <- merge(points_all, points_data, by="cell_id")
rm(points_data)
gc()
}
# Add in Market Access ---------------------------------------------------------
append_MA_constantpop <- function(year){
# If odd year, use previous year
if(year %% 2 == 1){
year_data <- year - 1
} else{
year_data <- year
}
print(year)
points_MA <- readRDS(file.path(outputs_for_grid, "DMSPOLS", paste0("MA_",year_data,"_constantpopTrue.Rds"))) %>% dplyr::select(cell_id, MA)  %>% data.table
points_MA$year <- year
return(points_MA)
}
points_data_MA <- lapply(1996:2016, append_MA_constantpop) %>%
bind_rows %>%
dplyr::rename(MA_constantpop = MA)
points_all <- merge(points_all, points_data_MA, by=c("cell_id", "year"), all.x=T)
# Export -----------------------------------------------------------------------
saveRDS(points_all, file.path(finaldata_file_path, "dmspols_grid_dataset", "dmspols_level_dataset.Rds"))
saveRDS(points_all[points_all$year %in% seq(1992,2016,2),], file.path(finaldata_file_path, "dmspols_grid_dataset", "dmspols_level_dataset_evenyears.Rds"))
saveRDS(points_all[points_all$cell_id %in% sample(x=unique(points_all$cell_id),
size=ceiling(length(unique(points_all$cell_id))*0.05),
replace=F),],
file.path(finaldata_file_path, "dmspols_grid_dataset", "dmspols_level_dataset_5percentsample.Rds"))
head(points_all)
nrow(points_all)
